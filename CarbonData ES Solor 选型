背景：车辆GPS Can相关数据通过storm 初步处理实时写入hbase，DB2，每天晚上通过spark 程序进行一些聚合车辆聚合统计计算。相关查询通过Hbase 或者Db2 进行查询。在公司现有的业务背景下，使用一下技术提高系统的性能
目的 ： 在大数据中使用到的一些框架 技术，提高查询速度 
对象 ： Hbase, OrcFile,Parqet ,ES ,Solor,CarbonData


Hbase 部分业务无法满足
    1 车辆的定时定位查车功能 通过一个hbase 协处理器进行操作 ，当选择时间范围太长 用时超时，并发量完全不能满足要求
    2 一些多维度的查询不支持 不能太多车辆
    3 所有查询需要通过rowkey 
    4 无法满足OLTP 一些统计查询

ES ：
   根据自己的业务通过设计好字段映射 相关的配置 完全可以实现一些复杂的多维度的统计表查询，而且存储空间不会占用很大
   可以利用ES 自带的geo_distance 满足定时定位查车功能，满足前端不同的形状的选择。存储上只是多两个字段空间，同时可以通过ES 源码中自带的地理散列 进行很多功能的提升，有兴趣的可以自己找到相关源码个人就不再说明，并发量和性能跟现在绝不是一个数量级别。公司相关的POI 完全可以依赖ES自带算法。对应查询完全可以手动指定分区区查询（前提：配置好分区算法）相比Hbase 个人感觉高大上好多
Solor ： 
   Solor 也可以实现ES的一些功能，由于个人通过CDH 进行管理公司线上线下集群，所有Solor 跟CDH更容易整合到仪表盘或benkmark 上。Solor 之前公司同事用过个人并没有做个研究测试。 有关地图上面的一些算法更是无从得知
Parqut ,Orcfile ,CarbonData :
   OrcFile 是Hive 1.0.x 之后优化的文件存储格式，Parqut 是Cloudera Impala 存储的文件格式，CarbonData 是华为开源捐给Apache 的顶级项目,他整合啦OrcFile和Parqut 的相关优点。
   着重说一下CarbonData 
     虽然OrcFile 和Parqut 都是列式存储，她并不支持任意范围的交互数据分析，点对点查询，OLAP查询并且低延迟返回数据，无法实现二级索引。而CarbonData 有如下优点 1 支持广扫描& 少列结果 2 支持在亚秒级响应主键查找 3 支持大数据上涉及一个查询中有许多过滤的交互OLAP类查询, 并能以秒级响应 4 支持包含全列的单条记录的快速抽取 5 支持HDFS以便用户可以管理正存在的Hadoop集群。
   看重原因: 
   	  他在文件存储上实现了二级索引 倒排序 多维的过滤等可以通过Sql查询  完全可以利用集群中现有的很少的资源，得到 需要ES Solor 相同的效果 通过ES源码进行相关GPS处理算法的摘取应用到相关技术。
   	如果想了解它的相关技术可以在官网找到，着重看他的文件存储和物理存储，你会发现他很美
